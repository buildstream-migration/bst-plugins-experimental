include:
  - template: Code-Quality.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml

image: registry.gitlab.com/buildstream/buildstream-docker-images/testsuite-fedora:31-${DOCKER_IMAGE_VERSION}

cache:
  key: "$CI_JOB_NAME-"
  paths:
    - cache/

stages:
  - test
  - upload

variables:
  # SAST related variables
  SAST_DISABLE_DIND: "true"
  # only run a subset of default analyzers from:
  # https://docs.gitlab.com/ee/user/application_security/sast/analyzers.html
  SAST_DEFAULT_ANALYZERS: "bandit, secrets"
  SAST_GOSEC_LEVEL: 2
  CI_PROJECT_REPOSITORY_LANGUAGES: "python"

  # Our own variables
  # Version of the docker images we should use for all the images.
  # This is taken from buildstream/buildstream-docker-images and is updated
  # periodically.
  DOCKER_IMAGE_VERSION: master-140747994
  PYTEST_ADDOPTS: "--color=yes"
  INTEGRATION_CACHE: "${CI_PROJECT_DIR}/cache/integration-cache"
  PYTEST_ARGS: "--color=yes --integration"
  TEST_COMMAND: "tox -- ${PYTEST_ARGS}"

#####################################################
#                    Test stage                     #
#####################################################

# Run premerge commits
#
.test-template: &test-template
  stage: test

  before_script:
  # Diagnostics
  - mount
  - df -h
  - tox --version

  script:
  - mkdir -p "${INTEGRATION_CACHE}"
  - useradd -Um buildstream
  - chown -R buildstream:buildstream .

  # Run the tests as a simple user to test for permission issues
  - su buildstream -c "${TEST_COMMAND}"

test-fixed-debian-10:
  <<: *test-template
  image: registry.gitlab.com/buildstream/buildstream-docker-images/testsuite-debian:10-${DOCKER_IMAGE_VERSION}
  before_script:
    - apt update -y
    - apt install -y git-lfs
  variables:
    TOXENV: "py37-bst-fixed"

test-fixed-ubuntu-18:
  <<: *test-template
  image: registry.gitlab.com/buildstream/buildstream-docker-images/testsuite-ubuntu:18.04-${DOCKER_IMAGE_VERSION}
  before_script:
    - apt update -y
    - apt install -y git-lfs
    - |
      cat > /etc/gitconfig << EOF
      [filter "lfs"]
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
        process = git-lfs filter-process
        required = true
      EOF

  variables:
    TOXENV: "py36-bst-fixed"

test-fixed-fedora-31:
  <<: *test-template
  before_script:
    - dnf install -y git-lfs
  variables:
    TOXENV: "py37-bst-fixed"

test-fixed-python-38-debian:
  <<: *test-template
  image: registry.gitlab.com/buildstream/buildstream-docker-images/testsuite-python:3.8-buster-${DOCKER_IMAGE_VERSION}
  before_script:
    - apt update -y
    - apt install -y git-lfs
  variables:
    TOXENV: "py38-bst-fixed"

test-fixed-nodeps:
  <<: *test-template
  image: registry.gitlab.com/buildstream/buildstream-docker-images/testsuite-debian:10-${DOCKER_IMAGE_VERSION}
  before_script:
    - apt-get purge -y quilt ostree
  variables:
    TOXENV: "py37-bst-fixed"

# NOTE: Tests against master are only run against only one distribution in
# order to conserve CI resources.
test-master-fedora-31:
  image: registry.gitlab.com/buildstream/buildstream-docker-images/testsuite-fedora:31-${DOCKER_IMAGE_VERSION}
  <<: *test-template
  before_script:
    - dnf install -y git-lfs
  variables:
    TOXENV: "py37-bst-master"
  allow_failure: true

test-master-bwrap:
  <<: *test-template
  before_script:
    - dnf install -y git-lfs
  variables:
    TOXENV: "py37-bst-master"
    BST_FORCE_SANDBOX: "bwrap"
  allow_failure: true

docs:
  stage: test
  script:
  - tox -e docs
  artifacts:
    paths:
    - doc/build/html

lint:
  stage: test
  script:
  - tox -e lint

format-check:
  stage: test
  script:
  - tox -e format-check

#####################################################
#               Upload stage                        #
#####################################################

# Release documentation on all pushes to master branch.
#
pages:
  stage: upload
  dependencies:
  - docs
  script:
  - mv doc/build/html public
  artifacts:
    paths:
    - public/
  only:
  - master

# Automatically upload to PyPI when a release is tagged.
#
pypi-release:
  stage: upload
  before_script:
  - pip3 install twine
  script:
  - python3 setup.py sdist
  - twine upload dist/*.tar.gz
  only:
  - /[0-9]+\.[0-9]+\.[0-9]+/
  except:
  - branches
